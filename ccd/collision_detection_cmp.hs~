data Vec = Vec {x :: Float, y :: Float}
data Circle = Circle {p :: Vec, v :: Vec, r :: Float}
data World = {circles :: [Circle]}

instance Num Vec where
  (Vec {x1, y1}) + (Vec {x2, y2}) = Vec {x = x1 + x2, y = y1 + y2}
  (Vec {x1, y1}) - (Vec {x2, y2}) = Vec {x = x1 - x2, y = y1 - y2}
  abs (Vec {x, y}) = sqrt $ x * x + y * y

frameTime = 1/60

stepCircle :: Circle -> Circle
stepCircle (Circle {p, v, r})
