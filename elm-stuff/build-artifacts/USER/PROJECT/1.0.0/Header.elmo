Elm.Header = Elm.Header || {};
Elm.Header.make = function (_elm) {
   "use strict";
   _elm.Header = _elm.Header || {};
   if (_elm.Header.values)
   return _elm.Header.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Header",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "NoOp": return model;}
         _U.badCase($moduleName,
         "between lines 37 and 38");
      }();
   });
   var navButton = function (_v1) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return A2($Html.div,
              _L.fromArray([$Html$Attributes.$class("nav_button")]),
              _L.fromArray([A2($Html.a,
              _L.fromArray([$Html$Attributes.href(_v1._1)]),
              _L.fromArray([$Html.text(_v1._0)]))]));}
         _U.badCase($moduleName,
         "between lines 21 and 23");
      }();
   };
   var viewNav = function (model) {
      return A2($List.map,
      navButton,
      model.nav);
   };
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("header")]),
      _L.fromArray([navButton(model.home)
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("nav")]),
                   viewNav(model))]));
   });
   var NoOp = {ctor: "NoOp"};
   var init = F3(function (home,
   nav,
   selected) {
      return {_: {}
             ,home: home
             ,nav: nav
             ,selected: selected};
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,home: a
             ,nav: b
             ,selected: c};
   });
   _elm.Header.values = {_op: _op
                        ,init: init
                        ,update: update
                        ,view: view
                        ,Model: Model};
   return _elm.Header.values;
};